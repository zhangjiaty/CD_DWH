package routines;


import java.security.Security;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.jasypt.encryption.ByteEncryptor;
import org.jasypt.encryption.StringEncryptor;


/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class EncryptUtil {

	static {
	    Security.addProvider(new BouncyCastleProvider());
	  }

	  //~ Instance fields --------------------------------------------------------------------------------------------------

	  private static  ByteEncryptor byteEncryptor;

	  private static  StringEncryptor stringEncryptor;

	

	  /**
	   * getter method for byte encryptor.
	   *
	   * @return  ByteEncryptor
	   */
	  public static ByteEncryptor getByteEncryptor() {
	    return byteEncryptor;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * getter method for string encryptor.
	   *
	   * @return  StringEncryptor
	   */
	  public static StringEncryptor getStringEncryptor() {
	    return stringEncryptor;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * setter method for byte encryptor.
	   *
	   * @param  byteEncryptor  ByteEncryptor
	   */
	  public static void setByteEncryptor(ByteEncryptor setbyteEncryptor) {
	    byteEncryptor = setbyteEncryptor;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * setter method for string encryptor.
	   *
	   * @param  stringEncryptor  StringEncryptor
	   */
	  public static void setStringEncryptor(StringEncryptor setstringEncryptor) {
	    stringEncryptor = setstringEncryptor;
	  }
	  
    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        
    	CmcPBEStringEncryptor pbeStringEncryptor = new CmcPBEStringEncryptor();

    	pbeStringEncryptor.setProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    	pbeStringEncryptor.setAlgorithm("PBEWITHSHA256AND256BITAES-CBC-BC");
    	pbeStringEncryptor.setPassword("YCMCSMBd74mb9dk6nd8vn1zf20101112");
    	pbeStringEncryptor.setCompletelyEncryptedEnv("yes");
    	pbeStringEncryptor.setUseIndexQuery("yes");
    	try{
    		pbeStringEncryptor.afterPropertiesSet();
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	
    	String oan3 = "$0$++H+MHFCYbu19JG1paJxslzZmV5BBxDz2ot62IAKOuBC6PY5jCagOX1dg0ZU6ovs";

    	System.out.println(pbeStringEncryptor.decrypt(oan3));

    	System.out.println("end...." + message);    	
    }
}
