package routines;

import java.security.MessageDigest;
import java.security.Provider;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.Validate;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.jasypt.encryption.pbe.PBEByteEncryptor;
import org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

import org.jasypt.exceptions.AlreadyInitializedException;
import org.jasypt.exceptions.EncryptionInitializationException;
import org.jasypt.exceptions.EncryptionOperationNotPossibleException;

import org.jasypt.salt.SaltGenerator;

import sun.misc.BASE64Encoder;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class CmcPBEByteEncryptor implements PBEByteEncryptor {

	//~ Static fields/initializers ---------------------------------------------------------------------------------------

	  /**
	   * <p>Charset to be used to obtain "encryptable" byte arrays from input Strings. <b>Set to UTF-8</b>.</p>
	   *
	   * <p>This charset has to be fixed to some value so that we avoid problems with different platforms having different
	   * "default" charsets.</p>
	   *
	   * <p>It is set to <b>UTF-8</b> because it covers the whole spectrum of characters representable in Java (which
	   * internally uses UTF-16), and avoids the size penalty of UTF-16 (which will always use two bytes for representing
	   * each character, even if it is an ASCII one).</p>
	   *
	   * <p>Setting it to UTF-8 does not mean that Strings that originally come, for example, from an ISO-8859-1 input,
	   * won't be correctly encoded, as we only need to use the same charset both when encoding and decoding. That way the
	   * same String will be reconstructed independently of the original encoding (for encrypting, we only need "a byte
	   * representation" of the string, not "a readable byte representation").</p>
	   */
	  private static final String MESSAGE_CHARSET = "UTF-8";

	  /**
	   * <p>Charset to be used for encoding the encryption results. Set to <b>US-ASCII</b>.</p>
	   *
	   * <p>The result of encrypting some bytes can be any other bytes, and so the result of encrypting, for example, some
	   * LATIN-1 valid String bytes, can be bytes that may not conform a "valid" LATIN-1 String.</p>
	   *
	   * <p>Because of this, encryption results are always encoded in <i>BASE64</i> (default) or <i>HEXADECIMAL</i> after
	   * being created, and this ensures that the results will make perfectly representable, safe ASCII Strings. Because of
	   * this, the charset used to convert the encrypted bytes to the returned String is set to <b>US-ASCII</b>.</p>
	   */
	  private static final String ENCRYPTED_MESSAGE_CHARSET = "US-ASCII";

	  //~ Instance fields --------------------------------------------------------------------------------------------------

	  private String  algorithm = "NONENCRYPTION";
	  private boolean byPass    = false;

	  // The StandardPBEByteEncryptor that will be internally used.
	  private List<StandardPBEByteEncryptor> byteEncryptors         = new ArrayList<StandardPBEByteEncryptor>();
	  private String                         completelyEncryptedEnv = null;
	  private String                         derivedCMCKey          = "CO0108SMA0709CENINC";

	  private String        flagPrefix             = "$";
	  private int           keyLength              = 7;
	  private int           keyObtentionIterations = 1000;
	  private Log           log                    = LogFactory.getLog(getClass());
	  private String        password               = null;
	  private String        passwordDelimiter      = ":";
	  private Provider      provider               = null;
	  private String        providerName           = null;
	  private SaltGenerator saltGenerator          = null;
	  private Integer       strength               = null;
	  private String        useIndexQuery          = null;

	  //~ Methods ----------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  args  DOCUMENT ME!
	   */
	  public static void main(String[] args) {
	    CmcPBEByteEncryptor encryptor = new CmcPBEByteEncryptor();
	    String              str       = encryptor.getPrefix(1);
	    System.out.println(str);
	    System.out.println(str.getBytes().length);
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	 
	  /**
	   * <p>Decrypts a message using the specified configuration.</p>
	   *
	   * <p>This method expects to receive a BASE64-encoded (default) or HEXADECIMAL ASCII String.</p>
	   *
	   * <p>The mechanisms applied to perform the decryption operation are described in <a
	   * href="http://www.rsasecurity.com/rsalabs/node.asp?id=2127" target="_blank">PKCS &#035;5: Password-Based
	   * Cryptography Standard</a>.</p>
	   *
	   * <p>If a random salt generator is used, this decryption operation will expect to find an unencrypted salt at the
	   * beginning of the encrypted input, so that the decryption operation can be correctly performed (there is no other
	   * way of knowing it).</p>
	   *
	   * @param   encryptedMessage  the String message to be decrypted
	   *
	   * @return  the result of decryption
	   *
	   * @throws  org.jasypt.exceptions.EncryptionOperationNotPossibleException  if the decryption operation fails,
	   *                                                                         ommitting any further information about the
	   *                                                                         cause for security reasons.
	   * @throws  org.jasypt.exceptions.EncryptionInitializationException        if initialization could not be correctly
	   *                                                                         done (for example, no password has been
	   *                                                                         set).
	   */
	  @Override public byte[] decrypt(byte[] encryptedMessage) {
	    if (encryptedMessage == null) {
	      return null;
	    }

	    if (byPass) {
	      return encryptedMessage;
	    }

	    // Check initialization
	    if (!isInitialized()) {
	      initialize();
	    }

	    // default using the last password
	    byte[] toDecrypt = Arrays.copyOfRange(encryptedMessage, 0, encryptedMessage.length - keyLength);
	    String usingStr  = new String(Arrays.copyOfRange(encryptedMessage, encryptedMessage.length - keyLength,
	          encryptedMessage.length));
	    int    using     = 0;

	    String[] part = usingStr.split("\\" + flagPrefix);

	    if (part.length == 2) {
	      using = new Integer(part[1]).intValue();
	    }

	    try {
	      return getEncryptor(using).decrypt(toDecrypt);
	    } catch (EncryptionInitializationException e) {
	      log.error(e, e);
	    } catch (EncryptionOperationNotPossibleException e) {
	      // log.error(e, e);
	    } catch (Exception e) {
	      // log.error(e, e);
	    } // end try-catch

	    // turn original message if any exception happen
	    return encryptedMessage;
	  } // end method decrypt

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Encrypts a message using the specified configuration.</p>
	   *
	   * <p>The Strings returned by this method are BASE64-encoded (default) or HEXADECIMAL ASCII Strings.</p>
	   *
	   * <p>The mechanisms applied to perform the encryption operation are described in <a
	   * href="http://www.rsasecurity.com/rsalabs/node.asp?id=2127" target="_blank">PKCS &#035;5: Password-Based
	   * Cryptography Standard</a>.</p>
	   *
	   * <p>This encryptor uses a salt for each encryption operation. The size of the salt depends on the algorithm being
	   * used. This salt is used for creating the encryption key and, if generated by a random generator, it is also
	   * appended unencrypted at the beginning of the results so that a decryption operation can be performed.</p>
	   *
	   * <p><b>If a random salt generator is used, two encryption results for the same message will always be different
	   * (except in the case of random salt coincidence)</b>. This may enforce security by difficulting brute force attacks
	   * on sets of data at a time and forcing attackers to perform a brute force attack on each separate piece of encrypted
	   * data.</p>
	   *
	   * @param   message  the String message to be encrypted
	   *
	   * @return  the result of encryption
	   *
	   * @throws  org.jasypt.exceptions.EncryptionOperationNotPossibleException  if the encryption operation fails,
	   *                                                                         ommitting any further information about the
	   *                                                                         cause for security reasons.
	   * @throws  org.jasypt.exceptions.EncryptionInitializationException        if initialization could not be correctly
	   *                                                                         done (for example, no password has been
	   *                                                                         set).
	   */
	  @Override public byte[] encrypt(byte[] message) {
	    return encrypt(message, (int) (byteEncryptors.size() * Math.random()));
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param   message  DOCUMENT ME!
	   * @param   index    DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public byte[] encrypt(byte[] message, int index) {
	    if (message == null) {
	      return null;
	    }

	    if (byPass || (index >= byteEncryptors.size())) {
	      return message;
	    }

	    // Check initialization
	    if (!isInitialized()) {
	      initialize();
	    }

	    try {
	      // The StandardPBEByteEncryptor does its job.
	      // always using the last one
	      byte[] toEncrypted = getEncryptor(index).encrypt(message);
	      String prefix      = getPrefix(index);
	      byte[] prefixBytes = prefix.getBytes();

	      byte[] encryptedMessage = new byte[toEncrypted.length + prefixBytes.length];
	      System.arraycopy(toEncrypted, 0, encryptedMessage, 0, toEncrypted.length);
	      System.arraycopy(prefixBytes, 0, encryptedMessage, toEncrypted.length, prefixBytes.length);

	      return encryptedMessage;
	    } catch (EncryptionInitializationException e) {
	      log.error(e, e);
	    } catch (EncryptionOperationNotPossibleException e) {
	// log.error(e, e);
	    } catch (Exception e) {
	      log.error(e, e);
	    } // end try-catch

	    // turn original message if any exception happen
	    return message;
	  } // end method encrypt

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public String getAlgorithm() {
	    return this.algorithm;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public String getCompletelyEncryptedEnv() {
	    return completelyEncryptedEnv;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public String getPassword() {
	    return this.password;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param   index  DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public String getPrefix(int index) {
	    String str = "" + index;
	    int    len = keyLength - 2;

	    while (str.length() < len) {
	      str = ("0" + str);
	    }

	    return flagPrefix + str + flagPrefix;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * Get support password size.
	   *
	   * @return  get support password size.
	   */
	  public int getSize() {
	    return byteEncryptors.size();
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public String getUseIndexQuery() {
	    return useIndexQuery;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Initialize the encryptor.</p>
	   *
	   * <p>This operation will consist in determining the actual configuration values to be used, and then initializing the
	   * encryptor with them.<br/>
	   * These values are decided by applying the following priorities:</p>
	   *
	   * <ol>
	   *   <li>First, the default values are considered (except for password).</li>
	   *   <li>Then, if a <tt>{@link org.jasypt.encryption.pbe.config.PBEConfig}</tt> object has been set with <tt>
	   *     setConfig</tt>, the non-null values returned by its <tt>getX</tt> methods override the default values.</li>
	   *   <li>Finally, if the corresponding <tt>setX</tt> method has been called on the encryptor itself for any of the
	   *     configuration parameters, the values set by these calls override all of the above.</li>
	   * </ol>
	   *
	   * <p>Once an encryptor has been initialized, trying to change its configuration will result in an <tt>
	   * AlreadyInitializedException</tt> being thrown.</p>
	   *
	   * @throws  org.jasypt.exceptions.EncryptionInitializationException  if initialization could not be correctly done
	   *                                                                   (for example, no password has been set).
	   */
	  public synchronized void initialize() {
	    // Double-check to avoid synchronization issues
	    if (!this.isInitialized()) {
	      for (StandardPBEByteEncryptor byteEncryptor : byteEncryptors) {
	        byteEncryptor.initialize();
	      }
	    }
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /* This variable is used in the DAO hibernate classes.It tells if an env (qa,uat,prod ) is completely/partially encrypted.
	  This helps to decide which hql query to be executed .*/
	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public boolean isEncryptedEnv() {
	    if (StringUtils.equalsIgnoreCase("yes", getCompletelyEncryptedEnv())) {
	      return true;
	    }

	    return false;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Returns true if the encryptor has already been initialized, false if not.<br/>
	   * Initialization happens:</p>
	   *
	   * <ul>
	   *   <li>When <tt>initialize</tt> is called.</li>
	   *   <li>When <tt>encrypt</tt> or <tt>decrypt</tt> are called for the first time, if <tt>initialize</tt> has not been
	   *     called before.</li>
	   * </ul>
	   *
	   * <p>Once an encryptor has been initialized, trying to change its configuration will result in an <tt>
	   * AlreadyInitializedException</tt> being thrown.</p>
	   *
	   * @return  true if the encryptor has already been initialized, false if not.
	   */
	  public synchronized boolean isInitialized() {
	    for (StandardPBEByteEncryptor byteEncryptor : byteEncryptors) {
	      if (!byteEncryptor.isInitialized()) {
	        return false;
	      }
	    }

	    return true;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the algorithm to be used for encryption, like <tt>PBEWithMD5AndDES</tt>.</p>
	   *
	   * <p>This algorithm has to be supported by your JCE provider (if you specify one, or the default JVM provider if you
	   * don't) and, if it is supported, you can also specify <i>mode</i> and <i>padding</i> for it, like <tt>
	   * ALGORITHM/MODE/PADDING</tt>.</p>
	   *
	   * @param  algorithm  the name of the algorithm to be used.
	   */
	  public void setAlgorithm(String algorithm) {
	    this.algorithm = algorithm;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  completelyEncryptedEnv  DOCUMENT ME!
	   */
	  public void setCompletelyEncryptedEnv(String completelyEncryptedEnv) {
	    this.completelyEncryptedEnv = completelyEncryptedEnv;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  flagPrefix  DOCUMENT ME!
	   */
	  public void setFlagPrefix(String flagPrefix) {
	    this.flagPrefix = flagPrefix;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Set the number of hashing iterations applied to obtain the encryption key.</p>
	   *
	   * <p>This mechanism is explained in <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2127" target="_blank">
	   * PKCS &#035;5: Password-Based Cryptography Standard</a>.</p>
	   *
	   * @param  keyObtentionIterations  the number of iterations
	   */
	  public void setKeyObtentionIterations(int keyObtentionIterations) {
	    this.keyObtentionIterations = keyObtentionIterations;

	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the password to be used.</p>
	   *
	   * <p><b>There is no default value for password</b>, so not setting this parameter either from a
	   * {@link org.jasypt.encryption.pbe.config.PBEConfig} object or from a call to <tt>setPassword</tt> will result in an
	   * EncryptionInitializationException being thrown during initialization.</p>
	   *
	   * @param  password  the passwords to be used.
	   */
	  @Override public void setPassword(String password) {
	    this.password = password;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  passwordDelimiter  DOCUMENT ME!
	   */
	  public void setPasswordDelimiter(String passwordDelimiter) {
	    this.passwordDelimiter = passwordDelimiter;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the security provider to be asked for the encryption algorithm. The provider does not have to be registered
	   * at the security infrastructure beforehand, and its being used here will not result in its being registered.</p>
	   *
	   * <p>If this method is called, calling {@link #setProviderName(String)} becomes unnecessary.</p>
	   *
	   * <p>If no provider name / provider is explicitly set, the default JVM provider will be used.</p>
	   *
	   * @param  provider  the provider to be asked for the chosen algorithm
	   *
	   * @since  1.3
	   */
	  public void setProvider(Provider provider) {
	    this.provider = provider;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the name of the security provider to be asked for the encryption algorithm. This security provider has to
	   * be registered beforehand at the JVM security framework.</p>
	   *
	   * <p>The provider can also be set with the {@link #setProvider(java.security.Provider)} method, in which case it will
	   * not be necessary neither registering the provider beforehand, nor calling this {@link #setProviderName(String)}
	   * method to specify a provider name.</p>
	   *
	   * <p>Note that a call to {@link #setProvider(java.security.Provider)} overrides any value set by this method.</p>
	   *
	   * <p>If no provider name / provider is explicitly set, the default JVM provider will be used.</p>
	   *
	   * @param  providerName  the name of the security provider to be asked for the encryption algorithm.
	   *
	   * @since  1.3
	   */
	  public void setProviderName(String providerName) {
	    this.providerName = providerName;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the salt generator to be used. If no salt generator is specified, an instance of
	   * {@link org.jasypt.salt.RandomSaltGenerator} will be used.</p>
	   *
	   * @param  saltGenerator  the salt generator to be used.
	   */
	  public void setSaltGenerator(SaltGenerator saltGenerator) {
	    this.saltGenerator = saltGenerator;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  strength  DOCUMENT ME!
	   */
	  public void setStrength(int strength) {
	    this.strength = strength;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * <p>Sets the the form in which String output will be encoded. Available encoding types are:</p>
	   *
	   * <ul>
	   *   <li><tt><b>base64</b></tt> (default)</li>
	   *   <li><tt><b>hexadecimal</b></tt></li>
	   * </ul>
	   *
	   * <p>If not set, null will be returned.</p>
	   *
	   * @param   stringOutputType  the string output type.
	   *
	   * @throws  org.jasypt.exceptions.AlreadyInitializedException  DOCUMENT ME!
	   *
	   * @since   1.3
	   */
	  public synchronized void setStringOutputType(String stringOutputType) {
	    Validate.notEmpty(stringOutputType,
	      "String output type cannot be set empty");

	    if (isInitialized()) {
	      throw new AlreadyInitializedException();
	    }
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @param  useIndexQuery  DOCUMENT ME!
	   */
	  public void setUseIndexQuery(String useIndexQuery) {
	    this.useIndexQuery = useIndexQuery;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * DOCUMENT ME!
	   *
	   * @return  DOCUMENT ME!
	   */
	  public boolean useIndexQuery() {
	    if (StringUtils.equalsIgnoreCase("yes", getUseIndexQuery())) {
	      return true;
	    }

	    return false;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  /**
	   * Get encryptor by index, 0 based.
	   *
	   * @param   index  DOCUMENT ME!
	   *
	   * @return  get encryptor by index, 0 based.
	   */
	  private StandardPBEByteEncryptor getEncryptor(int index) {
	    return this.byteEncryptors.get(index);
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  private String hashPassword(String passwd, String hashAlgorithm) {
	    String hashedPwd = null;

	    try {
	      MessageDigest md = MessageDigest.getInstance(hashAlgorithm);
	      md.update(passwd.getBytes());

	      byte[]        byteData = md.digest();
	      BASE64Encoder enc      = new BASE64Encoder();
	      hashedPwd = enc.encode(byteData);
	    } catch (Exception e) {
	      log.error(e, e);
	    }

	    return hashedPwd;
	  }

	  //~ ------------------------------------------------------------------------------------------------------------------

	  private String needHashPassword(String passwd) {
	    if (StringUtils.isNotEmpty(passwd)) {
	      String flag     = passwd.substring(0, 1);
	      String tempPass = passwd.substring(1);

	      if ("Y".equalsIgnoreCase(flag)) {
	        passwd = tempPass + derivedCMCKey;
	        passwd = hashPassword(passwd, "SHA-512");
	        passwd = hashPassword(passwd, "MD5");
	      } else if ("N".equalsIgnoreCase(flag)) {
	        passwd = tempPass;
	      }
	    }

	    return passwd;
	  }
	
    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
}
